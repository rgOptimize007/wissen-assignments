Question

204. Count Primes
Medium

5620

1108

Add to List

Share
Given an integer n, return the number of prime numbers that are strictly less than n.

 

Example 1:

Input: n = 10
Output: 4
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.
Example 2:

Input: n = 0
Output: 0
Example 3:

Input: n = 1
Output: 0
 

Constraints:

0 <= n <= 5 * 106



Answer 

TLE 

class Solution {
    public int countPrimes(int n) {
        
        if(n == 0 || n == 1 || n == 2)
            return 0;
        int count = 0,tempIdx = 0,endIdx = 0;
        for(int i=2;i<n;i++){
          if(isPrime(i))
              count++;
        }
        return count;
    }
    
    public boolean isPrime(int val){
        
        if(val == 2)
            return true;
        if(val%2 == 0)
            return false;
        for(int i = 3;i<=Math.sqrt(val);i+=2){
            if(val%i == 0)
                return false;
        }
        return true;
    }
}



without TLE

class Solution {
    public int countPrimes(int n) {
        
        boolean notPrime[] = new boolean[n];
        int count = 0;
        for(int i=2;i<n;i++){
            if(notPrime[i] == false){
                count++;
                for(int j=i;j<n;j += i){
                    notPrime[j] = true;
                }
            }
        }
        return count;
    }
}


Lesson to learn - 

Time Complexity of a solution

Approach 1 - We could have used i=3;i<sqrt(N) - O(n*sqrt(n)) 
Approach 2 - use boolean array and mark all multiples = true and only increase count if index not visited - O(n*(>logn))


standard time complexities

log(N) < sqrt(N) < N < N*logN < N*sqrt(N) < N^2 < N^3 < N! < 2^N