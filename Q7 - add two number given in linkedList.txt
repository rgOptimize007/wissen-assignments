Question

2. Add Two Numbers
Medium

21692

4250

Add to List

Share
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]


[9,9,9,9,9,9,9]
[9,9,9,9]


 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.

Answer

Failed Answer

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        
        //construct 1st number
        long firstNum = evaluateNum(l1);
        long secondNum = evaluateNum(l2);
        
        long answer = firstNum + secondNum;
        
        if(answer == 0)
            return new ListNode(0);
        
        // prepare list
        long unitDigit = 0;
        ListNode head = null;
        ListNode lastNode = null;
        
        while(answer > 0){
            unitDigit = answer%10;
          //  System.out.println(unitDigit);
            if(head == null){
                head = new ListNode((int)unitDigit);
                head.next = null;
                lastNode = head;
            }
            else{
               ListNode newNode = new ListNode((int)unitDigit);
               newNode.next = null;
               lastNode.next = newNode;
               if(head.next == null)
                   head.next = newNode;
               lastNode = newNode;
            }  
            answer /= 10;
        }
        return head;
    }
    
    public long reverseTheNumber(long input){
        long output = 0;
        while(input > 0){
            output = output*10 + input%10;
            input /= 10;
        }
        return output;
    }
    
    public long evaluateNum(ListNode list){
        
        if(list.next == null)
            return list.val;
        long unitDigit = 0;
        long number = 0;
        int trailZeroCount = 0;
        boolean noTrailLeft = true;
        while(list != null){
            unitDigit = list.val;
            if(unitDigit == 0 && noTrailLeft)
                trailZeroCount++;
            else
                noTrailLeft = false;
            number = number*10 + unitDigit;
            System.out.print(" " + number);
            list = list.next;
        }
        
        System.out.println("number before : " + number);
        
        //reverse the number
        number = reverseTheNumber(number);
        
        while(trailZeroCount > 0){
            number *= 10;
            trailZeroCount--;
        }
        
        System.out.println("Number After : " + number);
        return number;
    }
}




Successful Answer


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
     
        int sum = 0;
        boolean isCarry = false;
        ListNode head = null;
        ListNode lastNode = null;
      while(l1 != null && l2 != null){
          sum = l1.val + l2.val;
          if(isCarry){
              sum += 1;
              isCarry = false;
          }
          if(sum/10 > 0){
              isCarry = true;
              sum %= 10;
          }
           if(head == null){
                head = new ListNode(sum);
                head.next = null;
                lastNode = head;
            }
            else{
               ListNode newNode = new ListNode(sum);
               newNode.next = null;
               lastNode.next = newNode;
               if(head.next == null)
                   head.next = newNode;
               lastNode = newNode;
            }
          l1 = l1.next;
          l2 = l2.next;
      }
        
      while(l1 != null){
            sum = l1.val;
            if(isCarry){
              sum += 1;
              isCarry = false;
            }
            if(sum/10 > 0){
              isCarry = true;
              sum %= 10;
            }
            ListNode newNode = new ListNode(sum);
            newNode.next = null;
            lastNode.next = newNode;
            lastNode = newNode;
            l1 = l1.next;
        }  
        
         while(l2 != null){
             sum = l2.val;
             if(isCarry){
              sum += 1;
              isCarry = false;
              }
             if(sum/10 > 0){
              isCarry = true;
              sum %= 10;
             }
            ListNode newNode = new ListNode(sum);
            newNode.next = null;
            lastNode.next = newNode;
            lastNode = newNode;
            l2 = l2.next;
        }
        
        if(isCarry){
            ListNode newNode = new ListNode(1);
            newNode.next = null;
            lastNode.next = newNode;
        }
      return head;
    }
}
